{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useGitHubProjects = username => {\n  _s();\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [filter, setFilter] = useState('all');\n  useEffect(() => {\n    const fetchProjects = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const headers = {\n          'Accept': 'application/vnd.github.v3+json',\n          ...(process.env.REACT_APP_GITHUB_TOKEN && {\n            'Authorization': `token ${process.env.REACT_APP_GITHUB_TOKEN}`\n          })\n        };\n        const response = await fetch(`https://api.github.com/users/${username}/repos?sort=updated&direction=desc&per_page=100`, {\n          headers\n        });\n        if (!response.ok) {\n          throw new Error(response.status === 403 ? 'Limite de requisições excedido. Por favor, configure o token do GitHub.' : response.status === 404 ? 'Usuário não encontrado.' : 'Falha ao buscar projetos do GitHub.');\n        }\n        const data = await response.json();\n\n        // Buscar linguagens para cada repositório com tratamento de erro individual\n        const projectsWithLanguages = await Promise.all(data.map(async repo => {\n          try {\n            const languagesResponse = await fetch(repo.languages_url, {\n              headers\n            });\n            const languages = languagesResponse.ok ? await languagesResponse.json() : {};\n            return {\n              id: repo.id,\n              name: repo.name,\n              description: repo.description,\n              html_url: repo.html_url,\n              stargazers_count: repo.stargazers_count,\n              forks_count: repo.forks_count,\n              watchers_count: repo.watchers_count,\n              languages: Object.keys(languages),\n              created_at: repo.created_at,\n              updated_at: repo.updated_at\n            };\n          } catch (err) {\n            console.error(`Erro ao buscar linguagens para ${repo.name}:`, err);\n            return {\n              ...repo,\n              languages: []\n            };\n          }\n        }));\n\n        // Filtrar projetos que não são forks e ordenar por data de atualização\n        const filteredProjects = projectsWithLanguages.filter(project => !project.fork).sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at));\n        setProjects(filteredProjects);\n      } catch (err) {\n        setError(err.message);\n        console.error('Erro ao buscar projetos:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (username) {\n      fetchProjects();\n    }\n  }, [username]);\n\n  // Filtrar projetos por linguagem\n  const filteredProjects = filter === 'all' ? projects : projects.filter(project => project.languages.includes(filter));\n\n  // Obter lista única de linguagens disponíveis\n  const availableFilters = ['all', ...new Set(projects.flatMap(project => project.languages))].filter(Boolean);\n  return {\n    projects: filteredProjects,\n    loading,\n    error,\n    filter,\n    setFilter,\n    availableFilters\n  };\n};\n_s(useGitHubProjects, \"rT3l3o0ZHcYt3m50eb9mNF+80EI=\");","map":{"version":3,"names":["useState","useEffect","useGitHubProjects","username","_s","projects","setProjects","loading","setLoading","error","setError","filter","setFilter","fetchProjects","headers","process","env","REACT_APP_GITHUB_TOKEN","response","fetch","ok","Error","status","data","json","projectsWithLanguages","Promise","all","map","repo","languagesResponse","languages_url","languages","id","name","description","html_url","stargazers_count","forks_count","watchers_count","Object","keys","created_at","updated_at","err","console","filteredProjects","project","fork","sort","a","b","Date","message","includes","availableFilters","Set","flatMap","Boolean"],"sources":["C:/Users/rochi/OneDrive/Área de Trabalho/PortifólioWeb/src/hooks/useGitHubProjects.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport const useGitHubProjects = (username) => {\r\n  const [projects, setProjects] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [filter, setFilter] = useState('all');\r\n\r\n  useEffect(() => {\r\n    const fetchProjects = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        const headers = {\r\n          'Accept': 'application/vnd.github.v3+json',\r\n          ...(process.env.REACT_APP_GITHUB_TOKEN && {\r\n            'Authorization': `token ${process.env.REACT_APP_GITHUB_TOKEN}`\r\n          })\r\n        };\r\n\r\n        const response = await fetch(\r\n          `https://api.github.com/users/${username}/repos?sort=updated&direction=desc&per_page=100`,\r\n          { headers }\r\n        );\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(\r\n            response.status === 403 \r\n              ? 'Limite de requisições excedido. Por favor, configure o token do GitHub.'\r\n              : response.status === 404\r\n              ? 'Usuário não encontrado.'\r\n              : 'Falha ao buscar projetos do GitHub.'\r\n          );\r\n        }\r\n\r\n        const data = await response.json();\r\n        \r\n        // Buscar linguagens para cada repositório com tratamento de erro individual\r\n        const projectsWithLanguages = await Promise.all(\r\n          data.map(async (repo) => {\r\n            try {\r\n              const languagesResponse = await fetch(repo.languages_url, { headers });\r\n              const languages = languagesResponse.ok \r\n                ? await languagesResponse.json() \r\n                : {};\r\n              \r\n              return {\r\n                id: repo.id,\r\n                name: repo.name,\r\n                description: repo.description,\r\n                html_url: repo.html_url,\r\n                stargazers_count: repo.stargazers_count,\r\n                forks_count: repo.forks_count,\r\n                watchers_count: repo.watchers_count,\r\n                languages: Object.keys(languages),\r\n                created_at: repo.created_at,\r\n                updated_at: repo.updated_at\r\n              };\r\n            } catch (err) {\r\n              console.error(`Erro ao buscar linguagens para ${repo.name}:`, err);\r\n              return {\r\n                ...repo,\r\n                languages: []\r\n              };\r\n            }\r\n          })\r\n        );\r\n\r\n        // Filtrar projetos que não são forks e ordenar por data de atualização\r\n        const filteredProjects = projectsWithLanguages\r\n          .filter(project => !project.fork)\r\n          .sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at));\r\n\r\n        setProjects(filteredProjects);\r\n      } catch (err) {\r\n        setError(err.message);\r\n        console.error('Erro ao buscar projetos:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (username) {\r\n      fetchProjects();\r\n    }\r\n  }, [username]);\r\n\r\n  // Filtrar projetos por linguagem\r\n  const filteredProjects = filter === 'all' \r\n    ? projects \r\n    : projects.filter(project => project.languages.includes(filter));\r\n\r\n  // Obter lista única de linguagens disponíveis\r\n  const availableFilters = ['all', ...new Set(projects.flatMap(project => project.languages))].filter(Boolean);\r\n\r\n  return {\r\n    projects: filteredProjects,\r\n    loading,\r\n    error,\r\n    filter,\r\n    setFilter,\r\n    availableFilters,\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}