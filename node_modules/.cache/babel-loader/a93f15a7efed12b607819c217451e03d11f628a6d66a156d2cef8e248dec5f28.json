{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useGitHubProjects = username => {\n  _s();\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [filter, setFilter] = useState('all');\n  useEffect(() => {\n    const fetchProjects = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(`https://api.github.com/users/${username}/repos?sort=updated&direction=desc`);\n        if (!response.ok) {\n          throw new Error('Falha ao buscar projetos');\n        }\n        const data = await response.json();\n\n        // Buscar linguagens para cada repositório\n        const projectsWithLanguages = await Promise.all(data.map(async repo => {\n          const languagesResponse = await fetch(repo.languages_url);\n          const languages = await languagesResponse.json();\n          return {\n            ...repo,\n            languages: Object.keys(languages)\n          };\n        }));\n        setProjects(projectsWithLanguages);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (username) {\n      fetchProjects();\n    }\n  }, [username]);\n  const filteredProjects = filter === 'all' ? projects : projects.filter(project => project.languages.includes(filter));\n  const availableFilters = ['all', ...new Set(projects.flatMap(project => project.languages))];\n  return {\n    projects: filteredProjects,\n    loading,\n    error,\n    filter,\n    setFilter,\n    availableFilters\n  };\n};\n_s(useGitHubProjects, \"rT3l3o0ZHcYt3m50eb9mNF+80EI=\");","map":{"version":3,"names":["useState","useEffect","useGitHubProjects","username","_s","projects","setProjects","loading","setLoading","error","setError","filter","setFilter","fetchProjects","response","fetch","ok","Error","data","json","projectsWithLanguages","Promise","all","map","repo","languagesResponse","languages_url","languages","Object","keys","err","message","filteredProjects","project","includes","availableFilters","Set","flatMap"],"sources":["C:/Users/rochi/OneDrive/Área de Trabalho/PortifólioWeb/src/hooks/useGitHubProjects.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport const useGitHubProjects = (username) => {\r\n  const [projects, setProjects] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [filter, setFilter] = useState('all');\r\n\r\n  useEffect(() => {\r\n    const fetchProjects = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await fetch(`https://api.github.com/users/${username}/repos?sort=updated&direction=desc`);\r\n        \r\n        if (!response.ok) {\r\n          throw new Error('Falha ao buscar projetos');\r\n        }\r\n\r\n        const data = await response.json();\r\n        \r\n        // Buscar linguagens para cada repositório\r\n        const projectsWithLanguages = await Promise.all(\r\n          data.map(async (repo) => {\r\n            const languagesResponse = await fetch(repo.languages_url);\r\n            const languages = await languagesResponse.json();\r\n            return {\r\n              ...repo,\r\n              languages: Object.keys(languages),\r\n            };\r\n          })\r\n        );\r\n\r\n        setProjects(projectsWithLanguages);\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (username) {\r\n      fetchProjects();\r\n    }\r\n  }, [username]);\r\n\r\n  const filteredProjects = filter === 'all' \r\n    ? projects \r\n    : projects.filter(project => project.languages.includes(filter));\r\n\r\n  const availableFilters = ['all', ...new Set(projects.flatMap(project => project.languages))];\r\n\r\n  return {\r\n    projects: filteredProjects,\r\n    loading,\r\n    error,\r\n    filter,\r\n    setFilter,\r\n    availableFilters,\r\n  };\r\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,iBAAiB,GAAIC,QAAQ,IAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE3CC,SAAS,CAAC,MAAM;IACd,MAAMY,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACFL,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgCZ,QAAQ,oCAAoC,CAAC;QAE1G,IAAI,CAACW,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;QAC7C;QAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;;QAElC;QACA,MAAMC,qBAAqB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC7CJ,IAAI,CAACK,GAAG,CAAC,MAAOC,IAAI,IAAK;UACvB,MAAMC,iBAAiB,GAAG,MAAMV,KAAK,CAACS,IAAI,CAACE,aAAa,CAAC;UACzD,MAAMC,SAAS,GAAG,MAAMF,iBAAiB,CAACN,IAAI,CAAC,CAAC;UAChD,OAAO;YACL,GAAGK,IAAI;YACPG,SAAS,EAAEC,MAAM,CAACC,IAAI,CAACF,SAAS;UAClC,CAAC;QACH,CAAC,CACH,CAAC;QAEDrB,WAAW,CAACc,qBAAqB,CAAC;MACpC,CAAC,CAAC,OAAOU,GAAG,EAAE;QACZpB,QAAQ,CAACoB,GAAG,CAACC,OAAO,CAAC;MACvB,CAAC,SAAS;QACRvB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAED,IAAIL,QAAQ,EAAE;MACZU,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACV,QAAQ,CAAC,CAAC;EAEd,MAAM6B,gBAAgB,GAAGrB,MAAM,KAAK,KAAK,GACrCN,QAAQ,GACRA,QAAQ,CAACM,MAAM,CAACsB,OAAO,IAAIA,OAAO,CAACN,SAAS,CAACO,QAAQ,CAACvB,MAAM,CAAC,CAAC;EAElE,MAAMwB,gBAAgB,GAAG,CAAC,KAAK,EAAE,GAAG,IAAIC,GAAG,CAAC/B,QAAQ,CAACgC,OAAO,CAACJ,OAAO,IAAIA,OAAO,CAACN,SAAS,CAAC,CAAC,CAAC;EAE5F,OAAO;IACLtB,QAAQ,EAAE2B,gBAAgB;IAC1BzB,OAAO;IACPE,KAAK;IACLE,MAAM;IACNC,SAAS;IACTuB;EACF,CAAC;AACH,CAAC;AAAC/B,EAAA,CAzDWF,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}