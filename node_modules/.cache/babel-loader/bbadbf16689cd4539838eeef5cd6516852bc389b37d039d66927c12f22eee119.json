{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useTheme = () => {\n  _s();\n  const [theme, setTheme] = useState(() => {\n    // Verifica se há um tema salvo no localStorage\n    const savedTheme = localStorage.getItem('theme');\n    // Verifica a preferência do sistema\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    return savedTheme || (prefersDark ? 'dark' : 'light');\n  });\n  useEffect(() => {\n    // Atualiza o localStorage quando o tema muda\n    localStorage.setItem('theme', theme);\n\n    // Atualiza as classes do documento\n    if (theme === 'dark') {\n      document.documentElement.classList.add('dark');\n      document.documentElement.style.colorScheme = 'dark';\n    } else {\n      document.documentElement.classList.remove('dark');\n      document.documentElement.style.colorScheme = 'light';\n    }\n\n    // Adiciona uma classe para ativar as transições\n    document.documentElement.classList.add('theme-transition');\n\n    // Remove a classe após a transição\n    const timeout = setTimeout(() => {\n      document.documentElement.classList.remove('theme-transition');\n    }, 500);\n    return () => clearTimeout(timeout);\n  }, [theme]);\n\n  // Observa mudanças na preferência do sistema\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      const newTheme = e.matches ? 'dark' : 'light';\n      setTheme(newTheme);\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'dark' ? 'light' : 'dark');\n  };\n  return {\n    theme,\n    toggleTheme\n  };\n};\n_s(useTheme, \"h/hSlSJeeonp9EdQEMysUEHs9Ms=\");","map":{"version":3,"names":["useState","useEffect","useTheme","_s","theme","setTheme","savedTheme","localStorage","getItem","prefersDark","window","matchMedia","matches","setItem","document","documentElement","classList","add","style","colorScheme","remove","timeout","setTimeout","clearTimeout","mediaQuery","handleChange","e","newTheme","addEventListener","removeEventListener","toggleTheme","prevTheme"],"sources":["C:/Users/rochi/OneDrive/Área de Trabalho/PortifólioWeb/src/hooks/useTheme.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport const useTheme = () => {\r\n  const [theme, setTheme] = useState(() => {\r\n    // Verifica se há um tema salvo no localStorage\r\n    const savedTheme = localStorage.getItem('theme');\r\n    // Verifica a preferência do sistema\r\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n    \r\n    return savedTheme || (prefersDark ? 'dark' : 'light');\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Atualiza o localStorage quando o tema muda\r\n    localStorage.setItem('theme', theme);\r\n    \r\n    // Atualiza as classes do documento\r\n    if (theme === 'dark') {\r\n      document.documentElement.classList.add('dark');\r\n      document.documentElement.style.colorScheme = 'dark';\r\n    } else {\r\n      document.documentElement.classList.remove('dark');\r\n      document.documentElement.style.colorScheme = 'light';\r\n    }\r\n\r\n    // Adiciona uma classe para ativar as transições\r\n    document.documentElement.classList.add('theme-transition');\r\n    \r\n    // Remove a classe após a transição\r\n    const timeout = setTimeout(() => {\r\n      document.documentElement.classList.remove('theme-transition');\r\n    }, 500);\r\n\r\n    return () => clearTimeout(timeout);\r\n  }, [theme]);\r\n\r\n  // Observa mudanças na preferência do sistema\r\n  useEffect(() => {\r\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\r\n    \r\n    const handleChange = (e) => {\r\n      const newTheme = e.matches ? 'dark' : 'light';\r\n      setTheme(newTheme);\r\n    };\r\n\r\n    mediaQuery.addEventListener('change', handleChange);\r\n    return () => mediaQuery.removeEventListener('change', handleChange);\r\n  }, []);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(prevTheme => prevTheme === 'dark' ? 'light' : 'dark');\r\n  };\r\n\r\n  return { theme, toggleTheme };\r\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,MAAM;IACvC;IACA,MAAMM,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD;IACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;IAE7E,OAAON,UAAU,KAAKG,WAAW,GAAG,MAAM,GAAG,OAAO,CAAC;EACvD,CAAC,CAAC;EAEFR,SAAS,CAAC,MAAM;IACd;IACAM,YAAY,CAACM,OAAO,CAAC,OAAO,EAAET,KAAK,CAAC;;IAEpC;IACA,IAAIA,KAAK,KAAK,MAAM,EAAE;MACpBU,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;MAC9CH,QAAQ,CAACC,eAAe,CAACG,KAAK,CAACC,WAAW,GAAG,MAAM;IACrD,CAAC,MAAM;MACLL,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACI,MAAM,CAAC,MAAM,CAAC;MACjDN,QAAQ,CAACC,eAAe,CAACG,KAAK,CAACC,WAAW,GAAG,OAAO;IACtD;;IAEA;IACAL,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,kBAAkB,CAAC;;IAE1D;IACA,MAAMI,OAAO,GAAGC,UAAU,CAAC,MAAM;MAC/BR,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACI,MAAM,CAAC,kBAAkB,CAAC;IAC/D,CAAC,EAAE,GAAG,CAAC;IAEP,OAAO,MAAMG,YAAY,CAACF,OAAO,CAAC;EACpC,CAAC,EAAE,CAACjB,KAAK,CAAC,CAAC;;EAEX;EACAH,SAAS,CAAC,MAAM;IACd,MAAMuB,UAAU,GAAGd,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC;IAEpE,MAAMc,YAAY,GAAIC,CAAC,IAAK;MAC1B,MAAMC,QAAQ,GAAGD,CAAC,CAACd,OAAO,GAAG,MAAM,GAAG,OAAO;MAC7CP,QAAQ,CAACsB,QAAQ,CAAC;IACpB,CAAC;IAEDH,UAAU,CAACI,gBAAgB,CAAC,QAAQ,EAAEH,YAAY,CAAC;IACnD,OAAO,MAAMD,UAAU,CAACK,mBAAmB,CAAC,QAAQ,EAAEJ,YAAY,CAAC;EACrE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,WAAW,GAAGA,CAAA,KAAM;IACxBzB,QAAQ,CAAC0B,SAAS,IAAIA,SAAS,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM,CAAC;EAChE,CAAC;EAED,OAAO;IAAE3B,KAAK;IAAE0B;EAAY,CAAC;AAC/B,CAAC;AAAC3B,EAAA,CApDWD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}